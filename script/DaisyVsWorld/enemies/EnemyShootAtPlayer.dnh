#include"script/default_system/Default_ShotConst.txt"
#include"script/default_system/Default_Effect.txt"

#include "../util.dnh"

task CreateEnemyShootAtPlayer(x, y, health) {
    let objEnemy;
    let enemyX;
    let enemyY;
    let count = 0;
    let animFrame = rand(0, 59);
    let imgEnemy = GetCurrentScriptDirectory() ~ "../visuals/Robotcat.png";
    let deathSFX = GetCurrentScriptDirectory() ~ "../sfx/death.mp3";
    let damageSFX = GetCurrentScriptDirectory() ~ "../sfx/damage.wav";
    let damageSFXObj = createSFXObject(damageSFX, 100);
    let deathSFXObj = createSFXObject(deathSFX, 100);

    TInitialize; // Make the enemy

    task TInitialize {
        LoadSound(deathSFX);
        LoadSound(damageSFX);

        objEnemy = ObjEnemy_Create(OBJ_ENEMY);
        ObjEnemy_Regist(objEnemy);
        ObjEnemy_SetLife(objEnemy, health);

        ObjMove_SetPosition(objEnemy, x, y);

        // Track the location of the enemy. This enemy is static though, so this is unnecessary
        enemyX = x;
        enemyY = y;

        TMainLoop;
        TFinalize;
    }

    task TMainLoop {
        renderEnemy;
        while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0) {
            damageEffect();

            // Enemy hitbox
            ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32); 
            ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 8);
        
            // Wait 30 frames before start shooting
            if (count == 30) {fireAtPlayer;}
            count++;
            yield;
        }
    }

    task renderEnemy{
        let enemySizeX = 84;
        let enemySizeY = 84;

        ObjPrim_SetTexture(objEnemy, imgEnemy);
        ObjSprite2D_SetSourceRect(objEnemy, 1, 1, enemySizeX, enemySizeY);
        ObjSprite2D_SetDestCenter(objEnemy);  // This center no longer needs to be set for each new sprite?
        ObjRender_SetScaleXYZ(objEnemy, 1, 1, 0);

        while ( !Obj_IsDeleted(objEnemy) ){
            if (animFrame < 15){
                ObjSprite2D_SetSourceRect(objEnemy, 1, 1, enemySizeX, enemySizeY);
            }
            else if (animFrame >= 15 && animFrame < 30){
                ObjSprite2D_SetSourceRect(objEnemy, enemySizeX + 1, 1, 2*enemySizeX, enemySizeY);
            }
            else if (animFrame >= 30 && animFrame < 45){
                ObjSprite2D_SetSourceRect(objEnemy, 2*enemySizeX + 1, 1, 3*enemySizeX, enemySizeY);
            }
            else if (animFrame >= 45 && animFrame < 60){
                ObjSprite2D_SetSourceRect(objEnemy, 3*enemySizeX + 1, 1, 4*enemySizeX, enemySizeY);
            }
            animFrame += 2;
            if (animFrame >= 60) {animFrame = 0;}
            yield;
        }
    }

    task fireAtPlayer{
        let randRange = 10;
        let shotAngle;
        while (ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0) {
            shotAngle = GetAngleToPlayer(objEnemy);
            CreateShotA1(enemyX, enemyY, 7, shotAngle + rand(-randRange, randRange), 100, 0);
            wait(5);
        }
    }

    function damageEffect(){
        if (ObjEnemy_GetInfo(objEnemy, INFO_SHOT_HIT_COUNT) > 0){
            PlaySE(damageSFX);
        }
    }

    task TFinalize {
        while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0) {yield;}
        PlaySE(deathSFX);
        TExplosionA(x, y, 10, 0.1);
        screenshake(2,3);
        Obj_Delete(objEnemy);
    }
}