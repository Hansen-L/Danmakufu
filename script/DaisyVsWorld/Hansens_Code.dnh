#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Old Code"]
#Text["Work in Progress"]
#System["script/DaisyVsWorld/system/Default_System.dnh"]  //This path is relative to the location of the Danmakufu .exe file
#Background["script/DaisyVsWorld/Background.dnh"]

let bossObj;
let playerObj = GetPlayerObjectID();
let bossX = 0;
let bossY = 0;
let imgBoss = GetCurrentScriptDirectory() ~ "visuals/Robotcat.png";
let flash = GetCurrentScriptDirectory() ~ "visuals/flash.png";
let animFrame = 0;
let animFrame2 = 0;
let enemyMvmt = 0;

let spellcardSFX = GetCurrentScriptDirectory() ~ "sfx/snow.mp3";
let deathSFX = GetCurrentScriptDirectory() ~ "sfx/death.mp3";
let backgroundMusic = GetCurrentScriptDirectory() ~ "sfx/megalovania.mp3";
let flashSFX = GetCurrentScriptDirectory() ~ "sfx/flash-sound.mp3";

#include "script/default_system/Default_ShotConst.txt"
#include"script/default_system/Default_Effect.txt"

@Initialize {

	SetAutoDeleteObject(true);

	let objScene = GetEnemyBossObjectID();
	ObjEnemyBossScene_StartSpell(objScene);

	// Defining boss object
	bossObj = ObjEnemy_Create(OBJ_ENEMY_BOSS);  // Initializes aenemy object and returns ID
	ObjEnemy_Regist(bossObj);  // Activates enemy associated with bossObj

	ObjMove_SetPosition(bossObj, 192, -100);

	ObjMove_SetDestAtSpeed(bossObj, 1000, 400, 6);

	//Load sounds into engine before we can use them
	LoadSound(spellcardSFX);
	LoadSound(deathSFX);
	LoadSound(backgroundMusic);
	LoadSound(flashSFX);

	PlayBGM(backgroundMusic, 0, 9999999);

	mainTask; 
}

@Event{
	// set boss timer and life
	alternative(GetEventType())
	case(EV_REQUEST_LIFE){
		SetScriptResult(1000);
	}
	case(EV_REQUEST_TIMER) {
		SetScriptResult(45);
	}
	case(EV_REQUEST_SPELL_SCORE) {
		SetScriptResult(30000);
	}
}

@MainLoop {  // Constantly runs in background
	bossX = ObjMove_GetX(bossObj);  // Updates bossX and bossY global variables
	bossY = ObjMove_GetY(bossObj);

	// collision for boss
	ObjEnemy_SetIntersectionCircleToShot(bossObj, bossX, bossY, 24);
	ObjEnemy_SetIntersectionCircleToPlayer(bossObj, bossX, bossY, 40);
	
	// Activate blink when pressing the specified key
	if(GetKeyState(KEY_X) == KEY_PUSH){
		blink();
	}

	yield;
}


@Finalize{

}


task mainTask{
	renderBoss;
	movement;
	TEnd;
}


function blink(){
	let blinkDist = 100; // Specifies how many pixels the player blinks
	let playerDir = GetPlayerDir();

	if (playerDir == 225){ //topleft
		ObjMove_SetPosition(playerObj, GetPlayerX() - blinkDist/1.414, GetPlayerY() - blinkDist/1.414);
	}
	else if (playerDir == 315){ //topright
		ObjMove_SetPosition(playerObj, GetPlayerX() + blinkDist/1.414, GetPlayerY() - blinkDist/1.414);
	}
	else if (playerDir == 135){ //botleft
		ObjMove_SetPosition(playerObj, GetPlayerX() - blinkDist/1.414, GetPlayerY() + blinkDist/1.414);
	}
	else if (playerDir == 45){ //botright
		ObjMove_SetPosition(playerObj, GetPlayerX() + blinkDist/1.414, GetPlayerY() + blinkDist/1.414);
	}
	else if(playerDir == 180){ //left
		ObjMove_SetPosition(playerObj, GetPlayerX() - blinkDist, GetPlayerY());
	}
	else if (playerDir == 0){ //right
		ObjMove_SetPosition(playerObj, GetPlayerX() + blinkDist, GetPlayerY());
	}
	else if (playerDir == 270){ //up
		ObjMove_SetPosition(playerObj, GetPlayerX(), GetPlayerY() - blinkDist);
	}
	else if (playerDir == 90){ //down
		ObjMove_SetPosition(playerObj, GetPlayerX(), GetPlayerY() + blinkDist);
	}

	if (playerDir != -1){ //If we aren't trying to blink in place
		flashAnimation; //Trigger the flash effect
		SetPlayerInvincibilityFrame(20); //Iframes for after blink
		PlaySE(flashSFX);
	}
}


function wait(w){ loop(w){yield; }}


function GetPlayerDir(){
		if (GetVirtualKeyState(VK_UP) == KEY_HOLD && GetVirtualKeyState(VK_LEFT) == KEY_HOLD){ //topleft
			return 225;
		}
		else if (GetVirtualKeyState(VK_UP) == KEY_HOLD && GetVirtualKeyState(VK_RIGHT) == KEY_HOLD){ //topright
			return 315;
		}
		else if (GetVirtualKeyState(VK_DOWN) == KEY_HOLD && GetVirtualKeyState(VK_LEFT) == KEY_HOLD){ //botleft
			return 135;
		}
		else if (GetVirtualKeyState(VK_DOWN) == KEY_HOLD && GetVirtualKeyState(VK_RIGHT) == KEY_HOLD){ //botright
			return 45;
		}
		else if(GetVirtualKeyState(VK_LEFT) == KEY_HOLD){ //left
			return 180;
		}
		else if (GetVirtualKeyState(VK_RIGHT) == KEY_HOLD){ //right
			return 0;
		}
		else if (GetVirtualKeyState(VK_UP) == KEY_HOLD){ //up
			return 270;
		}
		else if (GetVirtualKeyState(VK_DOWN) == KEY_HOLD){ //down
			return 90;
		}
		else {
			return -1;
		}
}


function angleToPlayer{
	let dir = atan2(GetPlayerY() - bossY, GetPlayerX() - bossX);
	return dir;
}


task flashAnimation{
	let i = 0;
	let flashSize = 40;
	let flashObj = ObjPrim_Create(OBJ_SPRITE_2D);		

	loop(6){
		i+=1;

		Obj_SetRenderPriorityI(flashObj, 100);
		ObjPrim_SetTexture(flashObj, flash);
		ObjSprite2D_SetSourceRect(flashObj, flashSize * (i-1), 0, flashSize * i, flashSize);
		ObjSprite2D_SetDestRect(flashObj, GetPlayerX() - 40, GetPlayerY() - 40, GetPlayerX() + 40, GetPlayerY() + 40);
		wait(5);
	}

	Obj_Delete(flashObj);
}


task renderBoss{
	let dir;
	let speed;
	let bossSizeX = 28*3;
	let bossSizeY = 28*3;

	ObjPrim_SetTexture(bossObj, imgBoss);
	ObjSprite2D_SetSourceRect(bossObj, 1, 1, bossSizeX, bossSizeY);
	ObjSprite2D_SetDestCenter(bossObj);  // This center no longer needs to be set for each new sprite?
	ObjRender_SetScaleXYZ(bossObj, 1, 1, 0);  // Scale holds for the object, even when changing the source texture

	while ( !Obj_IsDeleted(bossObj) ){

		// Update boss speed and direction locally
		dir = ObjMove_GetAngle(bossObj);
		speed = ObjMove_GetSpeed(bossObj);

		if (animFrame < 15){
			ObjSprite2D_SetSourceRect(bossObj, 1, 1, bossSizeX, bossSizeY);
		}
		else if (animFrame >= 15 && animFrame < 30){
			ObjSprite2D_SetSourceRect(bossObj, bossSizeX + 1, 1, 2*bossSizeX, bossSizeY);
		}
		else if (animFrame >= 30 && animFrame < 45){
			ObjSprite2D_SetSourceRect(bossObj, 2*bossSizeX + 1, 1, 3*bossSizeX, bossSizeY);
		}
		else if (animFrame >= 45 && animFrame < 60){
			ObjSprite2D_SetSourceRect(bossObj, 3*bossSizeX + 1, 1, 4*bossSizeX, bossSizeY);
		}
		animFrame += 1.5;

		yield;

		if (animFrame >= 60) {animFrame = 0;}

	}
}


task movement{
	loop{
		let r = 300; //- 2 * enemyMvmt;
		let theta = enemyMvmt * 2;
		let xEnemy = GetPlayerX() + absolute(r) * sin(theta);
		let yEnemy = GetPlayerY() - absolute(r) * cos(theta);

		ObjMove_SetDestAtSpeed(bossObj, xEnemy, yEnemy, 15);
		//ObjMove_SetPosition(bossObj, xEnemy, yEnemy);

		////ObjMove_SetDestAtSpeed(bossObj, 500, 300, 2);  // go left
		//wait(30);
		if (enemyMvmt % 5 == 0){fire;}
		//wait(10);
		////ObjMove_SetDestAtSpeed(bossObj, 1000, 400, 2);  // go right
		//wait(30);
		//fire;
		wait(1);
		enemyMvmt += 1;
	}
}


task fire{
	let dir = angleToPlayer;
	loop(2){
		CreateShotA1(bossX, bossY, 5, dir - 10 * rand(0.7, 1), 20, 0);
		CreateShotA1(bossX, bossY, 5, dir * rand(0.7, 1), 20, 0);
		CreateShotA1(bossX, bossY, 5, dir + 10 * rand(0.7, 1), 20, 0);
		wait(1);
	}
}


task TEnd{
	while (ObjEnemy_GetInfo(bossObj, INFO_LIFE) > 0) {
		yield;
	}

	TExplosionA(bossX,bossY,10,2);
	PlaySE(deathSFX);
	Obj_Delete(bossObj);
	DeleteShotAll(TYPE_ALL, TYPE_ITEM);
	wait(30);
	CloseScript(GetOwnScriptID());
}