#include"script/default_system/Default_ShotConst.txt"
#include"script/default_system/Default_Effect.txt"

task CreateStageEnemyByShotAngle(x, y, shotAngle, health) {
    let count = 0; //Counter

    //Used to check if enemy is off-stage
    let Xmin = -32;
    let Xmax = GetStgFrameWidth + 32;
    let Ymin = -32; 
    let Ymax = GetStgFrameHeight + 32;

    let objEnemy;
    let enemyX;
    let enemyY;

    let imgEnemy = GetCurrentScriptDirectory() ~ "Robotcat.png";


    TInitialize; // Make the enemy

    task TInitialize {
        objEnemy = ObjEnemy_Create(OBJ_ENEMY);
        ObjEnemy_Regist(objEnemy);
        ObjEnemy_SetLife(objEnemy, health);

        ObjMove_SetPosition(objEnemy, x, y);

        //Set enemy x and y for static enemy
        enemyX = x;
        enemyY = y;

        TMainLoop;
        TFinalize;
    }
    task TMainLoop {
        while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0) {
            renderEnemy;

            ObjEnemy_SetIntersectionCircleToShot(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 32); 
            ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 8);
            
            // Wait 30 frames before start shooting
            if (count == 30) {fireStraight;}
            count++;
            yield;
        }
    }

    function wait(w){ loop(w) { yield; } }

    task renderEnemy{
        ObjPrim_SetTexture(objEnemy, imgEnemy);
        ObjSprite2D_SetSourceRect(objEnemy, 1, 1, 84, 84);
        ObjSprite2D_SetDestCenter(objEnemy);  // This center no longer needs to be set for each new sprite?
        ObjRender_SetScaleXYZ(objEnemy, 1, 1, 0);

        while ( !Obj_IsDeleted(objEnemy) ){
            ObjSprite2D_SetSourceRect(objEnemy, 1, 1, 84, 84);

            yield;
        }

    }

    task fireStraight{
        while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0) {
            CreateShotA1(enemyX, enemyY, 5, shotAngle + rand(-20, 20), 105, 0);

            wait(10);
        }
    }
    task TFinalize {
        while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0) {yield;}
        Obj_Delete(objEnemy);
    }
}