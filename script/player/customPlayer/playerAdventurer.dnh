#TouhouDanmakufu[Player]
#ScriptVersion[3]
#ID["Adventurer"]
#Title["Adventurer"]
#Text["Adventurer"]
#ReplayName["Adventurer"]

let CSD = GetCurrentScriptDirectory();
let playerID = GetPlayerObjectID();
let playerObj = ObjPrim_Create(OBJ_SPRITE_2D);
let hitboxObj = ObjPrim_Create(OBJ_SPRITE_2D);
let count = -1;
let isFocus = false;
let curDirection = "L";
let runLRFrame = 0;
let runUDFrame = 0;
let runTLTRFrame = 0;
let runBLBRFrame = 0;
let prevDir = 270;
let spriteSizeX = 48;
let spriteSizeY = 55;

let shotAdventurer = CSD ~ "playershot.dnh";

let playerSprite = CSD ~ "Daisy-Sheet.png";

@Initialize{
	LoadPlayerShotData(shotAdventurer);

	SetPlayerSpeed(5, 2.5);

	ObjPlayer_AddIntersectionCircleA1(playerID, 0, 0, 2, 16);

	SetPlayerClip(6, 24, 1900, 1060);

	SetPlayerDownStateFrame(60);
	SetPlayerRebirthFrame(30);
	SetPlayerAutoItemCollectLine(120);
	renderPlayer;
}

@Event{
	alternative(GetEventType)
	case(EV_REQUEST_SPELL){
		if(GetPlayerSpell > 0) {
			SetScriptResult(true);
		}
		else{
			SetScriptResult(false); //placeholder to prevent bug when using spell
		}

	}
	case(EV_PLAYER_SHOOTDOWN){ //when player died
		SetForbidPlayerShot(true);
		SetForbidPlayerSpell(true);
	}
	case(EV_PLAYER_REBIRTH){
		SetForbidPlayerShot(false);
		SetForbidPlayerSpell(false);
		SetPlayerInvincibilityFrame(120);
		SetPlayerSpell(2);
	}
}

@MainLoop{
	if (IsPermitPlayerShot()){
		if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH || GetVirtualKeyState(VK_SHOT) == KEY_HOLD){
			count++;

			if (count > 1){
				let playerDir = GetPlayerDir(); //Find the angle the player is facing, generate shots based on that
				if (playerDir == -1) { //If we let go of the move button, use last used direction
					playerDir = prevDir;
				}

				//Spread of 3 shots 15 degrees apart, with random angle added from -5 to 5
				CreatePlayerShotA1(GetPlayerX(), GetPlayerY(), 15, playerDir - 15 + rand(-5, 5), 5, 1, 1);
				CreatePlayerShotA1(GetPlayerX(), GetPlayerY(), 15, playerDir + rand(-5, 5), 5, 1, 1);
				CreatePlayerShotA1(GetPlayerX(), GetPlayerY(), 15, playerDir + 15 + rand(-5, 5), 5, 1, 1);
				count = 0;

				prevDir = playerDir;
			}
		}
	}

	yield;
}

function GetPlayerDir(){
		if (GetVirtualKeyState(VK_UP) == KEY_HOLD && GetVirtualKeyState(VK_LEFT) == KEY_HOLD){ //topleft
			return 225;
		}
		else if (GetVirtualKeyState(VK_UP) == KEY_HOLD && GetVirtualKeyState(VK_RIGHT) == KEY_HOLD){ //topright
			return 315;
		}
		else if (GetVirtualKeyState(VK_DOWN) == KEY_HOLD && GetVirtualKeyState(VK_LEFT) == KEY_HOLD){ //botleft
			return 135;
		}
		else if (GetVirtualKeyState(VK_DOWN) == KEY_HOLD && GetVirtualKeyState(VK_RIGHT) == KEY_HOLD){ //botright
			return 45;
		}
		else if(GetVirtualKeyState(VK_LEFT) == KEY_HOLD){ //left
			return 180;
		}
		else if (GetVirtualKeyState(VK_RIGHT) == KEY_HOLD){ //right
			return 0;
		}
		else if (GetVirtualKeyState(VK_UP) == KEY_HOLD){ //up
			return 270;
		}
		else if (GetVirtualKeyState(VK_DOWN) == KEY_HOLD){ //down
			return 90;
		}
		else {
			return -1;
		}
}


task renderPlayer {
	ObjPrim_SetTexture(playerObj, playerSprite);
	Obj_SetRenderPriority(playerObj, 31);
	ObjSprite2D_SetSourceRect(playerObj, 0, 1, spriteSizeX, spriteSizeY); //initial render, doesn't run in loop
	ObjSprite2D_SetDestCenter(playerObj);
	ObjRender_SetScaleXYZ(playerObj, 1, 1, 1);

	while(!Obj_IsDeleted(playerObj)) {
		ObjRender_SetPosition(playerObj, GetPlayerX(), GetPlayerY(), 0);

		let playerDir = GetPlayerDir();


		ObjRender_SetAngleZ(playerObj, 0);
		alternative(playerDir)
		case(180){ //Left
			if (curDirection == "L"){runLRFrame+=3;}  //If the left key has been held down, start the animation 
			else{runLRFrame = 0;} //If direction just changed, set animation at 0
			ObjRender_SetAngleX(playerObj, 0);
			ObjRender_SetAngleY(playerObj, 180);
			curDirection = "L";
		}
		case(0){ //Right
			if (curDirection == "R"){runLRFrame+=3;}  
			else{runLRFrame = 0;} //If direction just changed, set animation at 0
			ObjRender_SetAngleX(playerObj, 0);
			ObjRender_SetAngleY(playerObj, 0);
			curDirection = "R";
		}
		case(270){ //Up
			if (curDirection == "U"){runUDFrame+=2;} 
			else{runUDFrame = 0;} //If direction just changed, set animation at 0
			ObjRender_SetAngleX(playerObj, 0);
			curDirection = "U";
		}
		case(90){ //Down
			if (curDirection == "D"){runUDFrame+=2;} 
			else{runUDFrame = 0;} //If direction just changed, set animation at 0
			ObjRender_SetAngleX(playerObj, 180);
			curDirection = "D";	
		}
		case(225){ //TopLeft
			if (curDirection == "TL"){runTLTRFrame+=2;} 
			else{runTLTRFrame = 0;} //If direction just changed, set animation at 0
			ObjRender_SetAngleY(playerObj, 180);
			curDirection = "TL";	
		}
		case(315){ //TopRight
			if (curDirection == "TR"){runTLTRFrame+=2;} 
			else{runTLTRFrame = 0;} //If direction just changed, set animation at 0
			ObjRender_SetAngleY(playerObj, 0);
			curDirection = "TR";	
		}
		case(45){ //BotRight
			if (curDirection == "TR"){runTLTRFrame+=2;} 
			else{runTLTRFrame = 0;} //If direction just changed, set animation at 0
			ObjRender_SetAngleY(playerObj, 0);
			ObjRender_SetAngleZ(playerObj, 60);
			ObjRender_SetAngleX(playerObj, 0);
			curDirection = "TR";	
		}
		case(135){ //BotLeft
			if (curDirection == "TL"){runTLTRFrame+=2;} 
			else{runTLTRFrame = 0;} //If direction just changed, set animation at 0
			ObjRender_SetAngleY(playerObj, 180);
			ObjRender_SetAngleZ(playerObj, 60);
			ObjRender_SetAngleX(playerObj, 0);
			curDirection = "TL";	
		}
		case(-1){ //Idle
		}

		
		if (curDirection == "TL" || curDirection == "TR" || curDirection == "BR" || curDirection == "BL"){ //If moving diag TL or TR
			if (runTLTRFrame >= 0 && runTLTRFrame < 15){
				ObjSprite2D_SetSourceRect(playerObj, 5*spriteSizeX + 1, 1, 6*spriteSizeX, spriteSizeY); 
			}
			else if (runTLTRFrame >= 15 && runTLTRFrame < 30){
				ObjSprite2D_SetSourceRect(playerObj, 6*spriteSizeX + 1, 1, 7*spriteSizeX, spriteSizeY); 
			}
			else if (runTLTRFrame >= 30 && runTLTRFrame < 45){
				ObjSprite2D_SetSourceRect(playerObj, 7*spriteSizeX+1, 1, 8*spriteSizeX, spriteSizeY); 
			}
			if (runTLTRFrame >= 45){runTLTRFrame = 0;}
		}
		else if (curDirection == "L" || curDirection == "R"){ //If moving right or left
			if (runLRFrame >= 0 && runLRFrame < 15){
				ObjSprite2D_SetSourceRect(playerObj, 0, 1, spriteSizeX, spriteSizeY); 
			}
			else if (runLRFrame >= 15 && runLRFrame < 30){
				ObjSprite2D_SetSourceRect(playerObj, spriteSizeX + 1, 1, 2*spriteSizeX, spriteSizeY); 
			}
			else if (runLRFrame >= 30 && runLRFrame < 45){
				ObjSprite2D_SetSourceRect(playerObj, 2*spriteSizeX + 1, 1, 3*spriteSizeX, spriteSizeY); 
			}
			else if (runLRFrame >= 45){runLRFrame = 0;}
		}
		else if (curDirection == "U" || curDirection == "D"){ //If moving up or down
			if (runUDFrame >= 0 && runUDFrame < 15){
				ObjSprite2D_SetSourceRect(playerObj, 3*spriteSizeX + 1, 1, 4*spriteSizeX, spriteSizeY); 
			}
			else if (runUDFrame >= 15 && runUDFrame < 30){
				ObjSprite2D_SetSourceRect(playerObj, 4*spriteSizeX + 1, 1, 5*spriteSizeX, spriteSizeY); 
			}
			else if (runUDFrame >= 30){runUDFrame = 0;}
		}	

		yield;
	}
}

task renderHitBox{

}

@Finalize{

}